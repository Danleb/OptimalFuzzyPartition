int CentersCount;
RWStructuredBuffer<float4> CentersColors;

Texture3D<float> MuGrids;

RWTexture2D<float4> Result;

bool DrawThresholdValue;
float MuThresholdValue;

bool DrawGrayscale;
int2 ImageSize;
int BorderWidth;

struct MuCenterData
{
	int index;
	float value;
};

MuCenterData GetMaxMuCenterData(int2 xy)
{
	int imax = 0;
	float max = MuGrids[int3(xy, 0)];

	for (int i = 0; i < CentersCount; i++)
	{
		float muValue = MuGrids[int3(xy, i)];

		if (muValue > max)
		{
			max = muValue;
			imax = i;
		}
	}

	MuCenterData data;
	data.index = imax;
	data.value = max;
	return data;
}

#pragma kernel DrawPartition
[numthreads(8, 8, 1)]
void DrawPartition(uint3 id : SV_DispatchThreadID)
{
	const float lightGrayValue = 0.7;
	const float4 lightGray = float4(lightGrayValue, lightGrayValue, lightGrayValue, 1);
	const float darkGrayValue = 0.3;
	const float4 darkGray = float4(darkGrayValue, darkGrayValue, darkGrayValue, 1);
	const float4 white = float4(1, 1, 1, 1);
	const float4 black = float4(0, 0, 0, 1);

	float4 res = black;

	int imax = 0;
	float max = MuGrids[uint3(id.xy, 0)];

	if (DrawGrayscale)
		if ((int)id.x - BorderWidth < 0 || (int)id.y - BorderWidth < 0 || id.x + BorderWidth > ImageSize.x || id.y + BorderWidth > ImageSize.y)
		{
			Result[id.xy] = darkGray;
			return;
		}

	for (int i = 0; i < CentersCount; i++)
	{
		float muValue = MuGrids[uint3(id.xy, i)];

		if (muValue > max)
		{
			max = muValue;
			imax = i;
		}

		res += CentersColors[i] * muValue;
	}

	if (DrawGrayscale)
	{
		for (int offsetX = -BorderWidth; offsetX < BorderWidth; offsetX++)
		{
			for (int offsetY = -BorderWidth; offsetY < BorderWidth; offsetY++)
			{
				int2 position = int2(id.xy) + int2(offsetX, offsetY);

				MuCenterData data = GetMaxMuCenterData(position);
				int neighborMaxIndex = data.index;

				if (DrawThresholdValue)
				{
					if (max > MuThresholdValue)
					{
						if (data.value < MuThresholdValue || imax != neighborMaxIndex)
						{
							Result[id.xy] = darkGray;
							return;
						}
					}
				}
				else
				{
					if (imax != neighborMaxIndex)
					{
						Result[id.xy] = darkGray;
						return;
					}
				}
			}
		}
	}

	if (DrawThresholdValue)
	{
		if (max < MuThresholdValue)
			res = lightGray;
		else
			res = CentersColors[imax];
	}

	if (DrawGrayscale && (!DrawThresholdValue || max > MuThresholdValue))
		res = white;

	res.a = 1;

	Result[id.xy] = res;
}