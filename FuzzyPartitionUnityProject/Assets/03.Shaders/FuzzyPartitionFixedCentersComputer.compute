#if DEBUG
#pragma enable_d3d11_debug_symbols
#endif

int CentersCount;

StructuredBuffer<float2> CentersPositions;
StructuredBuffer<float> AdditiveCoefficients;
StructuredBuffer<float> MultiplicativeCoefficients;

RWTexture3D<float> MuGrids;
RWTexture2D<float> PsiGrid;

float GradientLambdaStep;

float GradientEpsilon;

float2 GridSize;
float2 MinCorner;
float2 Diff;

RWStructuredBuffer<int> StopConditions;

#include "Assets/03.Shaders/Common.compute"

float GetDistance(float2 a, float2 b)
{
	return GetEuclideanDistance(a, b);
	//return GetManhattanDistance(a, b);
	///return GetChebyshevDistance(a, b);
}

#pragma kernel ZeroIterationInit
[numthreads(8,8,1)]
void ZeroIterationInit(uint3 id : SV_DispatchThreadID)
{
	uint2 texturePoint = id.xy;
	uint centerIndex = id.z;
	
	PsiGrid[texturePoint] = 1;
	
	float muRatio = 1.0 / CentersCount;
	MuGrids[id] = muRatio;
}

#pragma kernel UpdateMu
[numthreads(8,8,1)]
void UpdateMu(uint3 id : SV_DispatchThreadID)
{
	uint2 texturePoint = id.xy;
	uint centerIndex = id.z;
	
	float a = AdditiveCoefficients[centerIndex];
	float w = MultiplicativeCoefficients[centerIndex];
	float2 centerPosition = CentersPositions[centerIndex];

	float2 pointRatio = float2(texturePoint.x, texturePoint.y) / GridSize;
	float2 spacePoint = MinCorner + Diff * pointRatio;
	
	float densityValue = 1;
	float m = 2;
	
	float distance = GetDistance(centerPosition, spacePoint);

	float psiValue = PsiGrid[texturePoint];

	float newMuValue = -psiValue / (m * densityValue * (distance / w + a));

	float normalizedMuValue;

	if(newMuValue >= 0 && newMuValue <= 1)
	{
		normalizedMuValue = newMuValue;
	}
	else
	{
		float previousMuValue = MuGrids[id];
		float muGradient = psiValue + m * previousMuValue * (distance / w + a) * densityValue;
		float signMuGradient = sign(muGradient);
		normalizedMuValue = 0.5 * (1 - signMuGradient);
	}

	//MuGrids[id] = id.x;
	MuGrids[id] = normalizedMuValue;
}

#pragma kernel UpdatePsi
[numthreads(8,8,1)]
void UpdatePsi(uint3 id : SV_DispatchThreadID)
{
	uint2 texturePoint = id.xy;
	float grad = 0;
	for(int centerIndex = 0; centerIndex < CentersCount; centerIndex++)
		grad += MuGrids[uint3(texturePoint, centerIndex)];

	grad -= 1;

	PsiGrid[texturePoint] = PsiGrid[texturePoint] + GradientLambdaStep * grad;

	//check psi gradient value
	//if(grad > GradientEpsilon)//reset if gradient too big
	{
		StopConditions[0] = 0;
	}
}